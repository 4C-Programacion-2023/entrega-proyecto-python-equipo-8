class Habilidad:
    def __init__(self, nombre, tipo, potencia, precision, PP):
        self.nombre = nombre
        self.tipo = tipo 
        self.potencia = potencia 
        self.precision = precision
        self.PP = PP

class Pokemon:
    def __init__(self, nombre, ataque, defensa, PS):
        self.nombre = nombre
        self.ataque = ataque
        self.defensa = defensa
        self.PS = PS
        self.PS_max = PS
        self.habilidades = []

    def perder_PS(self, daño_bruto):
        self.PS = max(0, self.PS - daño_bruto)
        print("Se han perdido {} puntos de vida. PS restantes: {}".format(daño_bruto, self.PS))
        if self.PS == 0:
            print("¡El Pokémon ha muerto!")

    def calcular_daño(self, oponente, habilidad_seleccionada):
        daño_bruto = (((2 / 5 + 2) * habilidad_seleccionada.potencia * self.ataque / oponente.defensa) / 50 + 2)
        return int(daño_bruto)

    def inicializar_habilidad(self, habilidad: Habilidad):
        self.habilidades.append(habilidad)

    def elegir_habilidad(self):
        print("Elige un ataque para {}:".format(self.nombre))
        for i, habilidad in enumerate(self.habilidades):
            print("{}. {} (Potencia: {}, Precisión: {}, PP: {})".format(i + 1, habilidad.nombre, habilidad.potencia, habilidad.precision, habilidad.PP))

        respuesta = int(input())
        while respuesta not in range(1, len(self.habilidades) + 1):
            print("Opción no válida. Elige nuevamente.")
            respuesta = int(input())

        return self.habilidades[respuesta - 1]

class Pocion:
    def __init__(self, nombre, cantidad_regen):
        self.nombre = nombre
        self.cantidad_regen = cantidad_regen

    def usar(self, pokemon):
        pokemon.PS = min(pokemon.PS_max, pokemon.PS + self.cantidad_regen)
        print("{} ha usado {} y ha regenerado {} puntos de vida.".format(pokemon.nombre, self.nombre, self.cantidad_regen))


class Jugador:
    def __init__(self, nombre):
        self.nombre = nombre
        self.pokemons = []
        self.mochila = {}

    def agregar_pokemon(self, pokemon: Pokemon):
        self.pokemons.append(pokemon)

    def inicializar_mochila(self, pocion, cantidad):
        self.mochila[pocion.nombre] = cantidad

    def usar_pocion(self, pokemon):
        if "Poción de Vida" in self.mochila and self.mochila["Poción de Vida"] > 0:
            print("¿Deseas usar la Poción de Vida para curar a tu Pokémon?")
            print("1. Sí   2. No")
            respuesta = int(input())
            if respuesta == 1:
                cantidad_regen = min(20, pokemon.PS_max - pokemon.PS)
                pokemon.PS += cantidad_regen
                self.mochila["Poción de Vida"] -= 1
                print("{} ha usado Poción de Vida y ha regenerado {} puntos de vida.".format(pokemon.nombre, cantidad_regen))
            else:
                print("Decidiste no usar la Poción de Vida.")


    def combatir(self, jugador_oponente):
        if not self.pokemons or not jugador_oponente.pokemons:
            print("No hay suficientes Pokémon para combatir.")
            return

        print("¡Comienza el combate entre {} y {}!".format(self.pokemons[0].nombre, jugador_oponente.pokemons[0].nombre))

        turno = 1
        while self.pokemons and jugador_oponente.pokemons:
            if turno % 2 == 0:
                atacante = self.pokemons[0]
                defensor = jugador_oponente.pokemons[0]
                jugador_atacante = self
                jugador_defensor = jugador_oponente
            else:
                atacante = jugador_oponente.pokemons[0]
                defensor = self.pokemons[0]
                jugador_atacante = jugador_oponente
                jugador_defensor = self

            print("""
                Turno de {}
                1. Atacar   2. Mochila
                3. Pasar    4. -------
                """.format(atacante.nombre))
            respuesta = int(input())
            if respuesta == 1:
                ataque_seleccionado = atacante.elegir_habilidad()
                print("{} seleccionó {}.".format(atacante.nombre, ataque_seleccionado.nombre))
                if ataque_seleccionado.PP == 0:
                    print("¡No tienes mas ataques de este tipo!")
                else:
                    ataque_seleccionado.PP = ataque_seleccionado.PP - 1
                    print("{} ataca a {}.".format(atacante.nombre, defensor.nombre))
                    if ataque_seleccionado.tipo == "Fuego":
                        print("""
🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥
                              """)
                    if ataque_seleccionado.tipo == "Planta":
                        print("""
🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂🌿🍂
                              """)
                    if ataque_seleccionado.tipo == "Agua":
                        print("""
🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊
                              """)
                    if ataque_seleccionado.tipo == "Normal":
                        print("""
🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀🌀
                              """)    
                    daño = atacante.calcular_daño(defensor, ataque_seleccionado)
                    defensor.perder_PS(daño)
            elif respuesta == 2:
                print("Contenido de la mochila del {}:".format(jugador_atacante.nombre))
                for item, cantidad in jugador_atacante.mochila.items():
                    print("- {} (Cantidad: {})".format(item, cantidad))
                print("Elige el número de la poción que deseas usar:")
                num_pocion = int(input())
                pocion_seleccionada = None
                if num_pocion in range(1, len(jugador_atacante.mochila) + 1):
                    pocion_seleccionada = list(jugador_atacante.mochila.keys())[num_pocion - 1]
                if pocion_seleccionada == "Poción de Vida":
                    jugador_atacante.usar_pocion(atacante)
                else:
                    print("Poción inválida o no encontrada en la mochila.")
            elif respuesta == 3:
                break
            if defensor.PS <= 0:
                print("{} ha debilitado a {}.".format(atacante.nombre, defensor.nombre))
                jugador_defensor.pokemons.remove(defensor)

            turno += 1

        if not jugador_oponente.pokemons:
            print("{} ha ganado el combate.".format(self.nombre))
        else:
            print("{} ha ganado el combate.".format(jugador_oponente.nombre))

Ascuas = Habilidad("Ascuas","Fuego" , 40, 100, 15)
Placaje = Habilidad("Placaje","Normal" , 40, 100, 20)
Burbuja = Habilidad("Burbuja","Agua" , 40, 100, 15)
Hoja_Afilada = Habilidad("Hoja Afilada","Planta", 55, 95, 10)
Bulbasaur = Pokemon("Bulbasaur", 49, 49, 45)
Squirtle = Pokemon("Squirtle", 48, 65, 44)
Charmander = Pokemon("Charmander", 52, 43, 39)
pocion_vida = Pocion("Poción de Vida", 20)

jugador_1 = Jugador("Jugador 1")
jugador_2 = Jugador("Jugador 2")

ingreso = int(input("""
Pokemon Python Edition
1. Jugar
"""))
if ingreso == 1:
    print("""
Jugador 1, elige tu Pokémon:
1. Bulbasaur(Alto:PC. Medio:DEFENSA/DAÑO)
2. Charmander(Alto:DAÑO. Medio:DEFENSA. Bajo:PC)
3. Squirtle(Alto: DEFENSA. Medio:PC. Bajo:DAÑO)
""")
    respuesta = int(input())

    while respuesta not in [1, 2, 3]:
        print("Opción no válida. Elige nuevamente.")
        respuesta = int(input())

    if respuesta == 1:
        jugador_1.agregar_pokemon(Bulbasaur)
        print("Pokémon seleccionado con éxito.")
        print("""
Jugador 2, elige tu Pokémon:
1. Charmander(Alto:DAÑO. Medio:DEFENSA. Bajo:PC)
2. Squirtle(Alto: DEFENSA. Medio:PC. Bajo:DAÑO)
""")
        respuesta = int(input())
        while respuesta not in [1, 2]:
            print("Opción no válida. Elige nuevamente.")
            respuesta = int(input())
        if respuesta == 1:
            jugador_2.agregar_pokemon(Charmander)
            print("Pokémon seleccionado con éxito.")
        elif respuesta == 2:
            jugador_2.agregar_pokemon(Squirtle)
            print("Pokémon seleccionado con éxito.")

    elif respuesta == 2:
        jugador_1.agregar_pokemon(Charmander)
        print("Pokémon seleccionado con éxito.")
        print("""
Jugador 2, elige tu Pokémon:
1. Bulbasaur(Alto:PC. Medio:DEFENSA/DAÑO)
2. Squirtle(Alto: DEFENSA. Medio:PC. Bajo:DAÑO)
""")
        respuesta = int(input())
        while respuesta not in [1, 2]:
            print("Opción no válida. Elige nuevamente.")
            respuesta = int(input())
        if respuesta == 1:
            jugador_2.agregar_pokemon(Bulbasaur)
            print("Pokémon seleccionado con éxito.")
        elif respuesta == 2:
            jugador_2.agregar_pokemon(Squirtle)
            print("Pokémon seleccionado con éxito.")

    elif respuesta == 3:
        jugador_1.agregar_pokemon(Squirtle)
        print("Pokémon seleccionado con éxito.")
        print("""
Jugador 2, elige tu Pokémon:
1. Bulbasaur(Alto:PC. Medio:DEFENSA/DAÑO)
2. Charmander(Alto:DAÑO. Medio:DEFENSA. Bajo:PC)
""")
        respuesta = int(input())
        while respuesta not in [1, 2]:
            print("Opción no válida. Elige nuevamente.")
            respuesta = int(input())
        if respuesta == 1:
            jugador_2.agregar_pokemon(Bulbasaur)
            print("Pokémon seleccionado con éxito.")
        elif respuesta == 2:
            jugador_2.agregar_pokemon(Charmander)
        print("Pokémon seleccionado con éxito.")

    jugador_1.inicializar_mochila(pocion_vida, 5)
    jugador_2.inicializar_mochila(pocion_vida, 5)
    Charmander.inicializar_habilidad(Ascuas)
    Charmander.inicializar_habilidad(Placaje)
    Squirtle.inicializar_habilidad(Burbuja)
    Squirtle.inicializar_habilidad(Placaje)
    Bulbasaur.inicializar_habilidad(Hoja_Afilada)
    Bulbasaur.inicializar_habilidad(Placaje)
    jugador_1.combatir(jugador_2)

    print("\nResultado del combate:")
    print("Jugador 1:")
    for pokemon in jugador_1.pokemons:
        if pokemon.PS == 0:
            print("---Derribado---")
        else:
            print("- {} (PS: {})".format(pokemon.nombre, pokemon.PS))
    print("Jugador 2:")
    for pokemon in jugador_2.pokemons:
        if pokemon.PS == 0:
            print("---Derribado---")
        else:
            print("- {} (PS: {})".format(pokemon.nombre, pokemon.PS))

    if len(jugador_1.pokemons) > 0 and len(jugador_2.pokemons) == 0:
        print("""
         
\n✨¡Jugador 1 ha ganado el combate!✨
              
              """)
        ganador = jugador_1.nombre
        perdedor = jugador_2.nombre
    elif len(jugador_1.pokemons) == 0 and len(jugador_2.pokemons) > 0:
        print("""
        
\n✨¡Jugador 2 ha ganado el combate!✨

              """)
        ganador = jugador_2.nombre
        perdedor = jugador_1.nombre
    else:
        print("\n¡Ha sido un empate!")
        ganador = "Empate"
        perdedor = "Empate"

    estadisticas = {
    "Ganador": ganador,
    "Perdedor": perdedor,
    "Jugador 1": [pokemon.__dict__ for pokemon in jugador_1.pokemons],
    "Jugador 2": [pokemon.__dict__ for pokemon in jugador_2.pokemons]
}
    print("Gracias por jugar. ¡Hasta luego!")
